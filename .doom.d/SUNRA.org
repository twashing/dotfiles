#+title: Sunra
#+PROPERTY: header-args :tangle sunra.el

#+OPTIONS: TOC:2

** Preamble

#+BEGIN_SRC elisp
;;; ../.dotfiles/.doom.d/sunra.el -*- lexical-binding: t; -*-
#+END_SRC


** Reference

*** Eval expressions in minibuffer

#+BEGIN_SRC elisp
;; M-:  # Show minibuffer to eval expressions.
#+END_SRC

*** Kill groups of buffers

Use ibuffer (also use w/ embark)
Follow the same pattern as dired... Mark then delete

*** Index of buffer positions

https://protesilaos.com/codelog/2021-01-06-emacs-default-completion/

For a large structured file (.org .el etc), =consult-outline= and =consult-imenu= produce outline buffers.
This works as an index of buffer positions, that acts as a "table of contents".
=embark-occur= produces a persistent buffer.

#+BEGIN_QUOTE
consult-outline
consult-imenu
embark-occur
#+END_QUOTE

outline-minor-mode let's you define outline regex as a heading.
The variable outline-regexp can be changed to control what is a heading.
A line is a heading if outline-regexp matches something at the
beginning of the line. The longer the match, the deeper the level.

#+BEGIN_QUOTE
outline-minor-mode ;; Let's you define outline regex as a heading
outline-regexp
#+END_QUOTE

*** Replace across files, grep, wgrep mode

Search w/ grep (results must be on one line)

#+BEGIN_QUOTE
grep
projectile-grep
grep-find  # Perform rgrep in the project.
find-grep
find-grep-dired  # Find output is put into dired buffer
#+END_QUOTE

Replace + Write changes of multiple matches
C-c C-c (commit change)

#+BEGIN_QUOTE
wgrep-change-to-wgrep-mode     Change to wgrep mode.
wgrep-save-all-buffers         Save the buffers that wgrep changed.
wgrep-finish-edit           (C-x C-s)    Apply changes to file buffers.
wgrep-exit                  (C-x C-q)    Return to original mode.
wgrep-abort-changes            Discard all changes and return to original mo…
wgrep-mark-deletion            Mark as delete to current line.
wgrep-remove-change         (C-c C-r)    Remove changes in the region between BEG and …
wgrep-remove-all-change        Remove changes in the whole buffer.
wgrep-toggle-readonly-area     Toggle read-only area to remove a whole line.
#+END_QUOTE


*** Changes across files

Keyboard macros let us make multi-line changes across files.

#+BEGIN_QUOTE
kmacro-start-macro-or-insert-counter  # <f3>
kmacro-end-or-call-macro  # <f4>
kmacro-ring
desktop-save-mode  # saves keyboard macros, registers, any variable
#+END_QUOTE

Recreates variables at startup (including buffers, frames, registers...).

#+BEGIN_SRC elisp
(desktop-save-mode 1)

(add-to-list 'desktop-globals-to-save 'log-edit-comment-ring)
(add-to-list 'desktop-globals-to-save 'kmacro-ring)
(add-to-list 'desktop-globals-to-save 'kill-ring)
#+END_SRC

*** Completion



** General

*** Miscellaneous configuration

#+BEGIN_SRC elisp
(setq

 ;; Set *scratch* buffer to lisp-interaction-mode
 ;; https://emacsredux.com/blog/2014/07/25/configure-the-scratch-buffers-mode/
 ;; https://emacs.stackexchange.com/questions/3830/why-does-lisp-interaction-mode-exist-and-do-we-ever-need-it
 initial-major-mode 'lisp-interaction-mode


 ;; If you use `org' and don't want your org files in the default location below,
 ;; change `org-directory'. It must be set before org loads!
 org-directory "~/org/"

 ;; This determines the style of line numbers in effect. If set to `nil', line
 ;; numbers are disabled. For relative line numbers, set this to `relative'.
 display-line-numbers-type t

 ;; "confirm-kill-emacs is non-nil by default. The doom-quit module only adds silly confirmation messages to it. Do this to completely disable it."
 ;; https://github.com/doomemacs/doomemacs/issues/2688#issuecomment-596684817
 confirm-kill-emacs nil

 ;; Disable auto-comment on `newline-and-indent`
 ;; https://discord.com/channels/406534637242810369/1038583508140048425
 +default-want-RET-continue-comments nil
 +evil-want-o/O-to-continue-comments nil

 ;; When minibuffer offers tab completion, make that case-insensitive
 ;; https://emacs.stackexchange.com/a/32408/10528
 completion-ignore-case t)
#+END_SRC

*** Use Org Mode for all files ending with .notes.

#+BEGIN_SRC elisp
(add-to-list 'auto-mode-alist '("\\.notes\\'" . org-mode))
#+END_SRC

*** General Navigation and text actions.

#+BEGIN_SRC elisp
(global-set-key (kbd "C-c C-s") 'save-buffer)

(map! :map global-map
      "M-<backspace>" #'sp-backward-kill-word
      "C-c C-k" #'eval-buffer
      "C-c M-c" #'upcase-word
      "C-x M-x" #'isearch-forward-symbol-at-point
      "C-x RET" #'magit-status
      "M-W" #'delete-trailing-whitespace)

(map! :after consult
      :map general-override-mode-map
      "M-m s s" #'consult-line
      "M-m s S" #'consult-line-multi
      "M-y" #'consult-yank-from-kill-ring)


(map! :map general-override-mode-map
      "M-m p p" #'projectile-switch-project
      "M-m p f" #'projectile-find-file
      "M-m p r" #'projectile-replace
      "M-m p R" #'projectile-replace-regexp
      "M-m p S" #'projectile-save-project-buffers)
#+END_SRC

*** Substitute

Source and config taken from here.
- https://github.com/protesilaos/substitute
- https://protesilaos.com/emacs/substitute

#+BEGIN_SRC elisp
(use-package! substitute
  :config

  ;; If you want a message reporting the matches that changed in the
  ;; given context.  We don't do it by default.
  (add-hook 'substitute-post-replace-functions #'substitute-report-operation)

  ;; We do not bind any keys.  This is just an idea.  The mnemonic is
  ;; that M-# (or M-S-3) is close to M-% (or M-S-5).
  (let ((map global-map))
    (define-key map (kbd "M-# s") #'substitute-target-below-point)
    (define-key map (kbd "M-# r") #'substitute-target-above-point)
    (define-key map (kbd "M-# d") #'substitute-target-in-defun)
    (define-key map (kbd "M-# b") #'substitute-target-in-buffer)))
#+END_SRC

** Avy

#+BEGIN_SRC elisp
(setq avy-all-windows 'all-frames)
(map! "C-c g c" #'avy-goto-char-2)
#+END_SRC


** Navigation

#+BEGIN_SRC elisp
(fset 'buf-move-up "\C-u10\C-p")
(fset 'buf-move-down "\C-u10\C-n")
(map! "M-U" #'buf-move-up
      "M-D" #'buf-move-down
      "C-d" #'sp-kill-sexp)

#+END_SRC


** Smartparens Navigation

#+BEGIN_SRC elisp
(after! smartparens
  (turn-on-smartparens-strict-mode)
  (sp-pair "(" nil :unless '(:rem sp-point-before-word-p))
  (sp-pair "{" nil :unless '(:rem sp-point-before-word-p))
  (sp-pair "[" nil :unless '(:rem sp-point-before-word-p)))

(map! :map smartparens-mode-map
      :after smartparens
      "C-M-k" #'sp-copy-sexp
      "C-M-u" #'sp-up-sexp
      "M-u" #'sp-backward-up-sexp
      "C-M-d" #'sp-down-sexp
      "M-d" #'sp-backward-down-sexp
      "C-M-j" #'sp-forward-slurp-sexp
      "C-x C-M-j" #'sp-forward-barf-sexp
      "C-M-y" #'sp-backward-slurp-sexp
      "C-x C-M-y" #'sp-backward-barf-sexp
      "C-M-n" #'sp-next-sexp
      "M-r" #'sp-raise-sexp)

(after! ace-window

  ;; Switch window letter SIZE
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 6.0)))))

  ;; Ensure ace-window works across frames.
  (setq aw-scope 'global))

(map! "M-[" #'ace-select-window
      "C-c M-[" #'ace-swap-window
      "C-x M-[" #'ace-delete-window
      ;; "M-y" #'browse-kill-ring
      "C-M-[" #'scroll-other-window-down
      "C-M-]" #'scroll-other-window
      "C-M-s" #'sp-splice-sexp
      "C-x b" #'consult-buffer
      "C-M-l" #'transpose-lines)
#+END_SRC


** Multiple cursors

Mark next and previous key bindings.

Also key bindings for [[https://github.com/abo-abo/hydra][Hydra]] multiple cursors.

#+BEGIN_SRC elisp
(map! "C-c m N l" #'mc/mark-next-lines
      "C-c m N t" #'mc/mark-next-like-this
      "C-c m N w" #'mc/mark-next-like-this-word
      "C-c m N W" #'mc/mark-next-word-like-this
      "C-c m N s" #'mc/mark-next-like-this-symbol
      "C-c m N S" #'mc/mark-next-symbol-like-this
      "C-c m P l" #'mc/mark-previous-lines

      "C-c s n" #'mc/skip-to-next-like-this
      "C-c s p" #'mc/skip-to-previous-like-this
      "C-c m i n" #'mc/insert-numbers

      "C-c m a t" #'mc/mark-all-like-this
      "C-c m a w" #'mc/mark-all-words-like-this
      "C-c m a s" #'mc/mark-all-symbols-like-this
      "C-c m a r" #'mc/mark-all-in-region
      "C-c m a x" #'mc/mark-all-in-region-regexp
      "C-c m a d" #'mc/mark-all-like-this-dwim
      "C-c m a D" #'mc/mark-all-dwim

      "C-c m e l" #'mc/edit-lines
      "C-c m e b" #'mc/edit-beginnings-of-lines
      "C-c m e e" #'mc/edit-ends-of-lines)

(defhydra hydra-multiple-cursors-next (general-override-mode-map "C-c m n")
  "
   Mark next"
  ("l" mc/mark-next-lines "lines")
  ("t" mc/mark-next-like-this "next")
  ("w" mc/mark-next-like-this-word "word")
  ("s" mc/mark-next-like-this-symbol "symbol")
  ("W" mc/mark-next-word-like-this "whole word")
  ("S" mc/mark-next-symbol-like-this "whole symbol")

  ("q" nil "quit" :color blue))

(defhydra hydra-multiple-cursors-previous (general-override-mode-map "C-c m p")
  "
   Mark previous"
  ("l" mc/mark-previous-lines "lines")
  ("t" mc/mark-previous-like-this "previous")
  ("w" mc/mark-previous-like-this-word "word")
  ("s" mc/mark-previous-like-this-symbol "symbol")
  ("W" mc/mark-previous-word-like-this "whole word")
  ("S" mc/mark-previous-symbol-like-this "whole symbol")

  ("q" nil "quit" :color blue))

#+END_SRC


** Hide-Show

#+BEGIN_SRC elisp
(map! "C-o" #'hs-toggle-hiding
      "C-c @ C-M-h" #'hs-hide-all
      "C-c @ C-M-s" #'hs-show-all
      "C-c @ C-M-l" #'hs-hide-level)
#+END_SRC


** Cider

We have to clear out `C-c M-c` before we can rebind it.

#+BEGIN_SRC elisp
(after! cider

  ;; DONT open new window on cider-connect, et al
  (setq cider-repl-pop-to-buffer-on-connect nil)
  (setq cider-auto-select-test-report-buffer nil)
  (setq cider-auto-select-error-buffer nil))

(map! :after cider
      :map cider-mode-map
      "C-c M-c" #'cider-connect-clj
      "C-c C-k" #'cider-eval-buffer)

(map! :after clojure
      :map clojure-mode-map
      "C-c M-c" #'cider-connect-clj)

(with-eval-after-load 'general
  (define-key general-override-mode-map (kbd "C-c M-c") nil))
#+END_SRC


** Miscellaneous

To get information about any of these functions/macros, move the cursor over

#+BEGIN_SRC elisp
(defun delete-whitespace-except-one ()
  (interactive)
  (just-one-space -1))

(map! "C-M-SPC" #'delete-whitespace-except-one
      "C-," #'+default/newline-above
      "C-." #'+default/newline-below)

#+END_SRC


** Copy line

#+BEGIN_SRC elisp
(defun copy-line (&optional arg)
  "Do a kill-line but copy rather than kill.  This function directly calls
  kill-line, so see documentation of kill-line for how to use it including prefix
  argument and relevant variables.  This function works by temporarily making the
  buffer read-only."
  (interactive "P")
  (let ((buffer-read-only t)
        (kill-read-only-ok t))
    (kill-line arg)))

(map! "C-c k" #'copy-line
      "C-c K" #'avy-copy-line)

#+END_SRC


** Completions

*** Context

Exploring the optimal Emacs Completions with

#+BEGIN_VERSE
Vertigo
vs Helm
vs Counsel (used in Doom)
vs Consult (improvement over counsel? - https://github.com/minad/consult)
#+END_VERSE

Using Emacs Episode 80 - Vertico, Marginalia, Consult, and Embark
- https://www.youtube.com/watch?v=5ffb2at2d7w

Streamline Your Emacs Completions with Vertico
- https://www.youtube.com/watch?v=J0OaRy85MOo
- https://systemcrafters.cc/emacs-tips/streamline-completions-with-vertico
- https://github.com/minad/vertico


*** Research

Emacs Completion Explained
- https://www.youtube.com/watch?v=fnE0lXoe7Y0

Using Emacs Episode 80 - Vertico, Marginalia, Consult, and Embark
- https://www.youtube.com/watch?v=5ffb2at2d7w
- https://cestlaz.github.io/post/using-emacs-80-vertico

Emacs: completion framework (Embark, Consult, Orderless, etc.)
- https://www.youtube.com/watch?v=43Dg5zYPHTU
- https://protesilaos.com/codelog/2021-01-06-emacs-default-completion


"One important feature is that it plugs in directly to Emacs' own completion engine unlike Helm and Ivy which have their own layer on top."
- https://systemcrafters.cc/emacs-tips/streamline-completions-with-vertico

[no] Helm, Ivy, have been superceded

[ok] Annotations exist on command execution and help menus. Addition not needed.
- Marginalia - https://github.com/minad/marginalia


*** Outcome

**** A. These are the packages I settled on.

- Vertico - https://github.com/minad/vertico
  - Completion-at-point - https://github.com/minad/vertico#completion-at-point-and-completion-in-region
  - Corfu - https://github.com/minad/corfu
- Consult - https://github.com/minad/consult
- Embark - https://github.com/oantolin/embark
- Orderless (vs Prescient, Selectrum)
  - https://github.com/oantolin/orderless
  - https://github.com/radian-software/prescient.el
  - https://github.com/radian-software/selectrum


**** B. Lo and behold, these are most of the choices that Doom makes in its `completion/vertico` module.

So all I had to do was enable it: `(doom! :completion  vertico)` ([ref](https://github.com/doomemacs/doomemacs/tree/master/modules/completion/vertico)).

- Vertico, which provides the vertical completion user interface
- Consult, which provides a suite of useful commands using completing-read
- Embark, which provides a set of minibuffer actions
- Marginalia, which provides annotations to completion candidates
- Orderless, which provides better filtering methods

#+begin_src elisp
(after! vertico

  (vertico-buffer-mode)
  (setq completion-styles '(orderless basic)))

(use-package! corfu

  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion
  (corfu-separator ?\s)          ;; Orderless field separator
  (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  :hook ((prog-mode . corfu-mode)
         (org-mode . corfu-mode)
         (shell-mode . corfu-mode)
         (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-excluded-modes'.
  :init
  (global-corfu-mode))

;; A few more useful configurations...
(use-package! emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))
#+END_SRC


**** CAPFs

#+BEGIN_QUOTE
Completions are either provided by commands like dabbrev-completion or by pluggable backends (completion-at-point-functions, Capfs).
Most programming language major modes implement a Capf. Furthermore the language server packages, Eglot and Lsp-mode, use Capfs which talk to the LSP server to retrieve the completions.

Corfu does not include its own completion backends.
The Emacs built-in Capfs and the Capfs provided by other programming language packages are usually sufficient.
A few additional Capfs and completion utilities are provided by the Cape package.
#+END_QUOTE

From this blurb taken from the [[https://github.com/minad/corfu#corfuel---completion-overlay-region-function][corfu.el repo]], I'm settling on these `completion-aat-point-functions`.

- [[https://github.com/minad/cape][Cape]] - Completion At Point Extensions
- [[https://github.com/joaotavora/eglot][Eglot]] - A client for LSP servers

Initial config stolen from this thread.
- [[https://git.sr.ht/~gagbo/doom-config/tree/master/item/modules/completion/corfu][B]]
- [[https://github.com/doomemacs/doomemacs/issues/5600][A]]

#+BEGIN_SRC elisp

(use-package! cape
  :defer t
  :init
  (map! [remap dabbrev-expand] 'cape-dabbrev)
  (add-to-list 'completion-at-point-functions #'cape-file)
  (add-to-list 'completion-at-point-functions #'cape-dabbrev t))


;; (use-package! corfu-history
;;   :after corfu
;;   :hook (corfu-mode . (lambda ()
;;                         (corfu-history-mode 1)
;;                         (savehist-mode 1)
;;                         (add-to-list 'savehist-additional-variables 'corfu-history))))

(use-package! corfu-quick
  ;; :after corfu
  :bind (:map corfu-map
         ("M-q" . corfu-quick-complete)
         ("C-q" . corfu-quick-insert)))

#+END_SRC

And Flymake configs for Eglot.

#+BEGIN_SRC elisp
(use-package! flymake
  :config
  (setq flymake-start-on-flymake-mode t)
  (setq flymake-no-changes-timeout nil)
  (setq flymake-start-on-save-buffer t))

(use-package! flymake-kondor
  :ensure t
  :hook (clojure-mode . flymake-kondor-setup))
#+END_SRC


** Org-Roam

These are references and notes, including howto videos.

- https://www.orgroam.com/
- https://github.com/org-roam/org-roam
- https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/
[[How I Take Notes with Org-Roam][- https://jethrokuan.github.io/org-roam-guide/]]
- [[https://www.youtube.com/watch?v=rH3ZH95zjKM][Org Roam Setup · Emacs Doomcasts 25]]
- [[https://www.youtube.com/watch?v=83JoRBjTXog][Aliases in Org Roam Emacs Doom · Emacs Doomcasts 26]]
- [[https://www.youtube.com/watch?v=AyhPmypHDEw][Getting Started with Org Roam - Build a Second Brain in Emacs]]
- [[https://www.youtube.com/watch?v=3H38Yglw1dU][The Goal: Building My Second Brain with Emacs and Org-Roam (An Overview)]]

#+BEGIN_SRC elisp
(after! org-roam

  (setq org-roam-directory (file-truename "~/roam"))

  ;; add markdown extension to org-roam-file-extensions list
  (setq org-roam-file-extensions '("org" "md")) ; enable Org-roam for a markdown extension
  (setq org-roam-title-sources '((mdtitle title mdheadline headline) (mdalias alias)))

  (add-to-list 'load-path (file-truename "~/.emacs.d/.local/straight/repos/md-roam"))

  ;; Configs taken from the home repo
  ;; https://github.com/org-roam/org-roam#configuration
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  )
#+END_SRC

Note: I had to manually eval `use-package md-roam`, in order to have it compile and run.
Otherwise I ran into [this error](https://discord.com/channels/406534637242810369/1028497228148518932) loading the package.

#+BEGIN_SRC elisp
(use-package! md-roam
 :config

 ;; (setq md-roam-file-extension-single "md")
 (md-roam-mode 1) ; md-roam-mode must be active before org-roam-db-sync
 (setq md-roam-file-extension "md") ; default "md". Specify an extension such as "markdown"
 (org-roam-db-autosync-mode 1) ; autosync-mode triggers db-sync. md-roam-mode must be already active

 (add-to-list 'org-roam-capture-templates
              '("m" "Markdown" plain "" :target
                (file+head "${slug}.md"
                           "---\ntitle: ${title}\nid: %<%Y-%m-%dT%H%M%S>\ncategory: \n---\n")
                :unnarrowed t))

 (with-eval-after-load 'markdown-mode
  (advice-add #'markdown-indent-line :before-until #'completion-at-point)))
#+END_SRC


** Emacs Client


[[https://www.youtube.com/watch?v=ZjCRxAMPdNc][Unlock the Power of the Daemon with emacsclient]]
Reload Doom config

emacs --daemon
emacsclient

. Setting these guys
$EDITOR=emacsclient
/Applications/Emacs.app/Contents/MacOS/Emacs --daemon
/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -cn

. Created EmacsDaemon, EmacsClient as launchable apps, as per:
https://stackoverflow.com/questions/10376206/what-is-the-preferred-bash-shebang


** TODOs

*** Add Table Of Contents to this file

*** Org-Roam Existing Notes


*** Configure Completion

Configure Capfs:
- cape
- corfu-history
- corfu-quick
- eglot (Clojure)

  See notes: [[https://www.youtube.com/watch?v=ROnceqt3kpE][Using Emacs 74 - Eglot]]

Orderless
Consult
Embark


*** Consult search, ignore case


*** Navigate Mark Ring

Start with these resources.
- [[https://www.youtube.com/watch?v=Dq5UOt63Mms&t=1364s][Efficient Text Selection with Emacs Key Bindings - Emacs Essentials #3 / Remember Your Place with the Mark Ring]]


*** Master Keymaps

[ok] What is full Keymap tree
  https://www.masteringemacs.org/article/mastering-key-bindings-emacs#what-is-a-keymap
  M-x describe-keymap

Fix some key sequences that don't work in all environs


*** Misc

. smartparens, (STRONG) highlight parens
. eval repl (from .clj .edn)

. Emacs Guix
https://emacs-guix.gitlab.io/website/manual/latest/emacs-guix.html#Top


*** Org Journaling


*** Org Presenting


*** Spellcheck Tools and Completions


** Errors

*** `org-roam-insert` doesn't find new notes

Details here:
https://discord.com/channels/406534637242810369/406554085794381833/1023291683129004042


*** Ripgrep is missing from path


*** Hydra mc/mark-next-line double marks cursor

Ie, pressing next selects the next n, instead of the next 1.

*** smartparens open square bracket fails to add closing bracket, when touched by a character
